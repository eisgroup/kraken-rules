// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Size payload sanity test should fail with array of 3: Results + reducer results 1`] = `
Object {
  "Field Metadata reduced results": Object {
    "Policy:0:policies": Object {
      "fieldType": "STRING",
      "id": "Policy:0:policies",
      "info": Object {
        "getContextInstanceId": [Function],
        "getContextName": [Function],
      },
      "isDisabled": undefined,
      "isHidden": undefined,
      "resolvedTargetPath": "policies",
      "ruleResults": Array [
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": true,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "EQUALS",
            "success": false,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadEquals",
          "severity": "critical",
          "templateVariables": Array [],
        },
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": false,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "MIN",
            "success": true,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadMin",
          "severity": "critical",
          "templateVariables": Array [],
        },
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": true,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "MAX",
            "success": false,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadMax",
          "severity": "critical",
          "templateVariables": Array [],
        },
      ],
    },
  },
  "Raw results": Object {
    "evaluationTimestamp": Any<Date>,
    "results": Object {
      "Policy:0:policies": Object {
        "contextFieldInfo": ContextFieldInfo {
          "contextId": "0",
          "contextName": "Policy",
          "fieldName": "policies",
          "fieldPath": "policies",
          "fieldType": "STRING",
        },
        "ruleResults": Array [
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "EQUALS",
              "success": false,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadEquals",
              "targetPath": "policies",
            },
          },
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "MIN",
              "success": true,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadMin",
              "targetPath": "policies",
            },
          },
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "MAX",
              "success": false,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadMax",
              "targetPath": "policies",
            },
          },
        ],
      },
    },
  },
  "Validation results": Object {
    "critical": Array [
      ResultErrorMessage {
        "info": Object {
          "getContextInstanceId": [Function],
          "getContextName": [Function],
        },
        "message": "Array length is invalid",
        "messageCode": "rule-size-error",
        "ruleName": "SizePayloadEquals",
        "severity": "critical",
        "templateVariables": Array [],
      },
      ResultErrorMessage {
        "info": Object {
          "getContextInstanceId": [Function],
          "getContextName": [Function],
        },
        "message": "Array length is invalid",
        "messageCode": "rule-size-error",
        "ruleName": "SizePayloadMax",
        "severity": "critical",
        "templateVariables": Array [],
      },
    ],
    "info": Array [],
    "warning": Array [],
  },
}
`;

exports[`Size payload sanity test should handle undefined collection: Results + reducer results 1`] = `
Object {
  "Field Metadata reduced results": Object {
    "Policy:0:policies": Object {
      "fieldType": "STRING",
      "id": "Policy:0:policies",
      "info": Object {
        "getContextInstanceId": [Function],
        "getContextName": [Function],
      },
      "isDisabled": undefined,
      "isHidden": undefined,
      "resolvedTargetPath": "policies",
      "ruleResults": Array [
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": true,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "EQUALS",
            "success": false,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadEquals",
          "severity": "critical",
          "templateVariables": Array [],
        },
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": true,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "MIN",
            "success": false,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadMin",
          "severity": "critical",
          "templateVariables": Array [],
        },
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": false,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "MAX",
            "success": true,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadMax",
          "severity": "critical",
          "templateVariables": Array [],
        },
      ],
    },
  },
  "Raw results": Object {
    "evaluationTimestamp": Any<Date>,
    "results": Object {
      "Policy:0:policies": Object {
        "contextFieldInfo": ContextFieldInfo {
          "contextId": "0",
          "contextName": "Policy",
          "fieldName": "policies",
          "fieldPath": "policies",
          "fieldType": "STRING",
        },
        "ruleResults": Array [
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "EQUALS",
              "success": false,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadEquals",
              "targetPath": "policies",
            },
          },
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "MIN",
              "success": false,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadMin",
              "targetPath": "policies",
            },
          },
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "MAX",
              "success": true,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadMax",
              "targetPath": "policies",
            },
          },
        ],
      },
    },
  },
  "Validation results": Object {
    "critical": Array [
      ResultErrorMessage {
        "info": Object {
          "getContextInstanceId": [Function],
          "getContextName": [Function],
        },
        "message": "Array length is invalid",
        "messageCode": "rule-size-error",
        "ruleName": "SizePayloadEquals",
        "severity": "critical",
        "templateVariables": Array [],
      },
      ResultErrorMessage {
        "info": Object {
          "getContextInstanceId": [Function],
          "getContextName": [Function],
        },
        "message": "Array length is invalid",
        "messageCode": "rule-size-error",
        "ruleName": "SizePayloadMin",
        "severity": "critical",
        "templateVariables": Array [],
      },
    ],
    "info": Array [],
    "warning": Array [],
  },
}
`;

exports[`Size payload sanity test should success with array of 2: Results + reducer results 1`] = `
Object {
  "Field Metadata reduced results": Object {
    "Policy:0:policies": Object {
      "fieldType": "STRING",
      "id": "Policy:0:policies",
      "info": Object {
        "getContextInstanceId": [Function],
        "getContextName": [Function],
      },
      "isDisabled": undefined,
      "isHidden": undefined,
      "resolvedTargetPath": "policies",
      "ruleResults": Array [
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": false,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "EQUALS",
            "success": true,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadEquals",
          "severity": "critical",
          "templateVariables": Array [],
        },
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": false,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "MIN",
            "success": true,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadMin",
          "severity": "critical",
          "templateVariables": Array [],
        },
        Object {
          "errorCode": "rule-size-error",
          "errorMessage": "Array length is invalid",
          "isFailed": false,
          "isOverridable": false,
          "isOverridden": false,
          "payloadResult": Object {
            "message": undefined,
            "min": 2,
            "sizeOrientation": "MAX",
            "success": true,
            "type": 2,
            "validationSeverity": "critical",
          },
          "ruleName": "SizePayloadMax",
          "severity": "critical",
          "templateVariables": Array [],
        },
      ],
    },
  },
  "Raw results": Object {
    "evaluationTimestamp": Any<Date>,
    "results": Object {
      "Policy:0:policies": Object {
        "contextFieldInfo": ContextFieldInfo {
          "contextId": "0",
          "contextName": "Policy",
          "fieldName": "policies",
          "fieldPath": "policies",
          "fieldType": "STRING",
        },
        "ruleResults": Array [
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "EQUALS",
              "success": true,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadEquals",
              "targetPath": "policies",
            },
          },
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "MIN",
              "success": true,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadMin",
              "targetPath": "policies",
            },
          },
          Object {
            "conditionEvaluationResult": ConditionEvaluationResult {
              "conditionEvaluation": "APPLICABLE",
              "error": undefined,
            },
            "kind": 2,
            "overrideInfo": Object {
              "overridable": false,
              "overrideApplicable": false,
              "overrideGroup": undefined,
            },
            "payloadResult": Object {
              "message": undefined,
              "min": 2,
              "sizeOrientation": "MAX",
              "success": true,
              "type": 2,
              "validationSeverity": "critical",
            },
            "ruleInfo": RuleInfo {
              "context": "Policy",
              "payloadtype": "SIZE",
              "ruleName": "SizePayloadMax",
              "targetPath": "policies",
            },
          },
        ],
      },
    },
  },
  "Validation results": Object {
    "critical": Array [],
    "info": Array [],
    "warning": Array [],
  },
}
`;
